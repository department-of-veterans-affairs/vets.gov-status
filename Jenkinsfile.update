import org.kohsuke.github.GitHub

@NonCPS
def merge_pr = {
  def github = GitHub.connect()

  def now = new Date().format('yyyy-MM-dd')
  def update_branch = "refs/heads/update-${now}"
  def target_branch = 'refs/heads/master'

  def pr_title = "Automatic Data Update on ${now}"
  def pr_body = 'Automatic Data Update run from Jenkins'

  def repo = github.getRepository('department-of-veterans-affairs/vets.gov-status')

  try {
    def pr = repo.createPullRequest(pr_title, update_branch, target_branch, pr_body)
  } catch (IOException e) {
    println "Creating a Pull Request failed: `${e}`"
  }

  // Intentionally fail this so it never gets merged
  def is_mergeable = false

  // Do basic checks of mergeability
  if (!pr.getMergeable() || pr.getMergeableState() != 'clean') {
    is_mergeable = false
  }

  if (is_mergeable) {
    pr.merge('Merged automatically by Jenkins.')
  } else {
    pr.comment('Skipping merge due to comment or change request!\ncc @robertfairhead')
  }
}

pipeline {
  agent any
  environment {
    GA_SERVICE_BASE64 = credentials('ga_serviceaccount_b64')
  }

  stages {

    stage('Setup Update Branch') {
      steps {
        sh 'git config user.name "Robert Fairhead"'
        sh 'git config user.email bob@adhocteam.us'
        sh 'git checkout -b update-$(date -I)'
      }
    }

    stage('Get Credentials') {
      steps {
          sh 'echo ${GA_SERVICE_BASE64} | base64 -d > scripts/serviceaccount.p12'          
      }
    }

    stage('Update Data') {
      steps{
        script {
          dockerImage = docker.build('scorecard-updater', 'scripts')
          args = "-v ${pwd()}/_data:/data"
          dockerImage.inside(args) {
            sh '/application/updates.sh'
          }
        }
      }
    }

    stage('Push Update Branch to Github') {
      steps {
        sh 'git add .'
        sh "git commit -m 'Updated Data'"
        sh 'git push -u origin HEAD'
      }
    }

    stage('Create and Merge PR') {
      steps {
        script{
          merge_pr()
        }
      }
    }
  }

  post {
    always {
      deleteDir()
    }
  }
}
